// Prisma Schema for Railway PostgreSQL
// This replaces the SQLite database with PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Document {
  id          String    @id @default(cuid())
  filename    String    @unique
  title       String
  grade_level String?   // "7", "8"
  volume      String?   // "V1", "V2"
  subject     String?
  publisher   String?   // "Ready Classroom Mathematics"
  content     String
  page_count  Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  units       Unit[]
  page_images PageImage[]
  
  @@map("documents")
}

model Unit {
  id          String   @id @default(cuid())
  document_id String
  unit_number String   // "1", "2", etc.
  title       String   // "Proportional Relationships: Ratios, Rates, and Circles"
  theme       String?  // Major category
  page_start  Int?
  page_end    Int?
  order_index Int      @default(0)
  created_at  DateTime @default(now())
  
  document    Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  @@index([document_id, order_index])
  @@map("units")
}

model Lesson {
  id              String   @id @default(cuid())
  unit_id         String
  lesson_number   String   // "1", "2", etc.
  title           String   // "Solve Problems Involving Scale"
  standards       String   // JSON array as string for SQLite 
  focus_type      String?  // "major", "supporting", "additional"
  instructional_days Int?
  page_start      Int?
  page_end        Int?
  order_index     Int      @default(0)
  created_at      DateTime @default(now())
  
  unit            Unit @relation(fields: [unit_id], references: [id], onDelete: Cascade)
  sessions        Session[]
  
  @@index([unit_id, order_index])
  @@map("lessons")
}

model Session {
  id            String   @id @default(cuid())
  lesson_id     String
  session_number String  // "1", "2", "3"
  title         String?  // "Develop Solving Problems Involving Volume"
  session_type  String?  // "explore", "develop", "refine"
  content       String
  page_start    Int?
  page_end      Int?
  order_index   Int      @default(0)
  created_at    DateTime @default(now())
  
  lesson        Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  activities    Activity[]
  problems      Problem[]
  
  @@index([lesson_id, order_index])
  @@map("sessions")
}

model Activity {
  id            String   @id @default(cuid())
  session_id    String
  activity_type String   // "try_it", "develop", "solution", "math_toolkit"
  title         String?
  content       String
  instructions  String?
  order_index   Int      @default(0)
  created_at    DateTime @default(now())
  
  session       Session @relation(fields: [session_id], references: [id], onDelete: Cascade)
  visual_elements VisualElement[]
  
  @@index([session_id, order_index])
  @@map("activities")
}

model Problem {
  id            String   @id @default(cuid())
  session_id    String
  problem_number String  // "3", "4", etc.
  content       String
  solution      String?
  difficulty    String?  // "basic", "intermediate", "advanced"
  problem_type  String?  // "example", "practice", "assessment"
  order_index   Int      @default(0)
  created_at    DateTime @default(now())
  
  session       Session @relation(fields: [session_id], references: [id], onDelete: Cascade)
  visual_elements VisualElement[]
  keywords      ProblemKeyword[]
  
  @@index([session_id, order_index])
  @@map("problems")
}

model VisualElement {
  id            String   @id @default(cuid())
  activity_id   String?
  problem_id    String?
  element_type  String   // "diagram", "chart", "image", "graph"
  filename      String   // "gold_brick_diagram.png"
  file_path     String   // Full path to extracted image
  alt_text      String?  // Accessibility description
  position_data String?  // JSON string for coordinates
  created_at    DateTime @default(now())
  
  activity      Activity? @relation(fields: [activity_id], references: [id], onDelete: Cascade)
  problem       Problem? @relation(fields: [problem_id], references: [id], onDelete: Cascade)
  
  @@map("visual_elements")
}

model PageImage {
  id            String   @id @default(cuid())
  document_id   String
  page_number   Int
  filename      String   // "page_001.png"
  image_data    Bytes    // Store PNG data directly in database
  width         Int
  height        Int
  file_size_kb  Float
  page_type     String   // "cover", "lesson", "practice", "assessment"
  word_count    Int      @default(0)
  text_preview  String?
  keywords      String  // JSON array as string
  created_at    DateTime @default(now())
  
  document      Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  
  @@unique([document_id, page_number])
  @@index([document_id, page_number])
  @@index([page_type])
  @@map("page_images")
}

model Topic {
  id          String   @id @default(cuid())
  name        String   @unique // "volume", "geometry", "ratios"
  description String?
  created_at  DateTime @default(now())
  
  keywords    TopicKeyword[]
  problems    ProblemKeyword[]
  
  @@map("topics")
}

model Keyword {
  id         String   @id @default(cuid())
  word       String   @unique
  definition String?
  subject    String?
  created_at DateTime @default(now())
  
  topics     TopicKeyword[]
  
  @@map("keywords")
}

model TopicKeyword {
  topic_id   String
  keyword_id String
  
  topic      Topic   @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  keyword    Keyword @relation(fields: [keyword_id], references: [id], onDelete: Cascade)
  
  @@id([topic_id, keyword_id])
  @@map("topic_keywords")
}

model ProblemKeyword {
  problem_id String
  topic_id   String
  
  problem    Problem @relation(fields: [problem_id], references: [id], onDelete: Cascade)
  topic      Topic   @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  
  @@id([problem_id, topic_id])
  @@map("problem_keywords")
}
